#!/usr/bin/env bash

set -e
set -o pipefail
# output all commands ran to console
# set -x

# Example usage:
# echo -e ${Red}This text will be red!${Reset}
Colors() {
	Escape="\033";

	# Reset
	Reset="${Escape}[0m"       # Text Reset

	# Regular Colors
	Black="${Escape}[0;30m"        # Black
	Red="${Escape}[0;31m"          # Red
	Green="${Escape}[0;32m"        # Green
	Yellow="${Escape}[0;33m"       # Yellow
	Blue="${Escape}[0;34m"         # Blue
	Purple="${Escape}[0;35m"       # Purple
	Cyan="${Escape}[0;36m"         # Cyan
	White="${Escape}[0;37m"        # White

	# Bold
	BBlack="${Escape}[1;30m"       # Black
	BRed="${Escape}[1;31m"         # Red
	BGreen="${Escape}[1;32m"       # Green
	BYellow="${Escape}[1;33m"      # Yellow
	BBlue="${Escape}[1;34m"        # Blue
	BPurple="${Escape}[1;35m"      # Purple
	BCyan="${Escape}[1;36m"        # Cyan
	BWhite="${Escape}[1;37m"       # White

	# Underline
	Underline="${Escape}[4m"
	UBlack="${Escape}[4;30m"       # Black
	URed="${Escape}[4;31m"         # Red
	UGreen="${Escape}[4;32m"       # Green
	UYellow="${Escape}[4;33m"      # Yellow
	UBlue="${Escape}[4;34m"        # Blue
	UPurple="${Escape}[4;35m"      # Purple
	UCyan="${Escape}[4;36m"        # Cyan
	UWhite="${Escape}[4;37m"       # White

	# Background
	On_Black="${Escape}[40m"       # Black
	On_Red="${Escape}[41m"         # Red
	On_Green="${Escape}[42m"       # Green
	On_Yellow="${Escape}[43m"      # Yellow
	On_Blue="${Escape}[44m"        # Blue
	On_Purple="${Escape}[45m"      # Purple
	On_Cyan="${Escape}[46m"        # Cyan
	On_White="${Escape}[47m"       # White

	# High Intensity
	IBlack="${Escape}[0;90m"       # Black
	IRed="${Escape}[0;91m"         # Red
	IGreen="${Escape}[0;92m"       # Green
	IYellow="${Escape}[0;93m"      # Yellow
	IBlue="${Escape}[0;94m"        # Blue
	IPurple="${Escape}[0;95m"      # Purple
	ICyan="${Escape}[0;96m"        # Cyan
	IWhite="${Escape}[0;97m"       # White

	# Bold High Intensity
	BIBlack="${Escape}[1;90m"      # Black
	BIRed="${Escape}[1;91m"        # Red
	BIGreen="${Escape}[1;92m"      # Green
	BIYellow="${Escape}[1;93m"     # Yellow
	BIBlue="${Escape}[1;94m"       # Blue
	BIPurple="${Escape}[1;95m"     # Purple
	BICyan="${Escape}[1;96m"       # Cyan
	BIWhite="${Escape}[1;97m"      # White

	# High Intensity backgrounds
	On_IBlack="${Escape}[0;100m"   # Black
	On_IRed="${Escape}[0;101m"     # Red
	On_IGreen="${Escape}[0;102m"   # Green
	On_IYellow="${Escape}[0;103m"  # Yellow
	On_IBlue="${Escape}[0;104m"    # Blue
	On_IPurple="${Escape}[0;105m"  # Purple
	On_ICyan="${Escape}[0;106m"    # Cyan
	On_IWhite="${Escape}[0;107m"   # White
}
Colors

function print_usage() {
	echo
	echo -e ${Purple}"NAME"${Reset}
	echo
	echo "	wp-backup"
	echo
	echo -e ${Purple}"DESCRIPTION"${Reset}
	echo
	echo "	Selectively backup WordPress site depending on option flag used."
	echo
	echo -e ${Purple}"SYNOPSYS"${Reset}
	echo
	echo "	wp-backup <flag(s)> <remote site>"
	echo
	echo -e ${Purple}"FLAGS:"${Reset}
	echo "	--help,		-h	Print this help message"
	echo "	--full,		-f	All of WordPress (minus uploads, cache and other wp-content folders), including database"
	echo "	--database,	-d	Database"
	echo "	--plugins,	-p	Plugins"
	echo "	--themes,	-t	Themes"
	echo "	--uploads,	-u	Uploads"
	echo -e "	--site,		-s	Remote site to backup from. Must (${RedF}both${Reset}) exist in ~/.wpcli/config.yml as an alias && ~/.ssh/config as a Host"
	echo "	--folder,	-f	Local folder to create back up files onto. If not set, will default to home folder."
	echo
	exit 1
}

[ $# -eq 0 ] && echo "This command requires an argument." >&2 && print_usage && exit 1

while [ ! $# -eq 0 ]
do
	case "$1" in
		--help | -h)
			print_usage
			exit
			;;
		--full | -f)
			wp_flag="true"
			break
			;;
		--database | -d)
			db_flag="true"
			;;
		--plugins | -p)
			plugins_flag="true"
			;;
		--themes | -t)
			themes_flag="true"
			;;
		--uploads | -u)
			uploads_flag="true"
			;;
		--site | -s)
			site=$2
			;;
		--folder | -f)
			folder=$2
			;;
		-*)
			echo -e ${Red}"$1${Reset} is not a valid argument!"
			print_usage
			exit 1
			;;
	esac
	shift
done

[[ -z "$site" ]] && echo "This command must have at least one option flag followed by the remote site's name!" && print_usage
[[ -z "$folder" ]] && $folder="~/"

date=`date +%Y-%m-%d`
themes="wp-content/themes"
plugins="wp-content/plugins"

# Get blog's name
wp_blogname=$(wp @$site option get blogname)
# Remove spaces
blogname=${wp_blogname//[[:space:]]/}

if [ -d $folder$blogname/backups/$date ]
then
	echo
	echo -e ${BRed}"Backup directory exists!"${Reset}
	while true
	do
		read -r -p "Remove existing backup? [Y/n] " input
		echo

		case $input in
			[yY][eE][sS]|[yY])
				rm -rf $folder$blogname/backups/$date
				echo -e ${Underline}"Deleted:${Reset} $folder$blogname/backups/$date"
				break
				;;
			[nN][oO]|[nN])
				echo "Leaving existing backup as is... Exiting!"
				exit
				;;
			*)
				echo "Invalid input..."
				;;
		esac
	done
fi

mkdir --parents $folder$blogname/backups/$date

# wp_abspath=/var/www/wp-config.php
wp_abspath="$(wp @$site config path)"

# wp_path=/var/www/
[[ $wp_abspath != *\wp-config.php ]] && echo ${Red}"Path looks bad: $wp_abspath"${Reset} && exit 1
wp_path=${wp_abspath//wp-config.php}

function maintenance_in {
	echo
	echo
	echo -e ${UYellow}"*** Entering maintenance mode ***"${Reset}
	echo
	start=`date +%s`
	# create .maintenance file in WordPress' root directory to put in maintenance mode
	maintenance='<?php \n\$upgrading = time();'
	ssh $site " echo -e \"$maintenance\" > \"$wp_path.maintenance\" "
}

function maintenance_out {
	ssh $site rm -f $wp_path.maintenance
	end=`date +%s`
	echo
	echo
	echo -e ${UYellow}"*** Exiting maintenance mode after $((end-start)) seconds ***"${Reset}
}

function backup_db {
	echo -n "Database..."
	wp @$site db export - > $folder$blogname/backups/$date/$blogname-db-$date.sql
	echo -e ${Green}"done!"${Reset}
}

function backup_plugins {
	echo -n "Plugins..."
	ssh $site tar --ignore-failed-read --absolute-names \
	-zcf $blogname-plugins-$date.tar.gz $wp_path$plugins
	echo -e ${Green}"done!"${Reset}
}

function backup_themes {
	echo -n "Themes..."
	ssh $site tar --ignore-failed-read --absolute-names \
	-zcf $blogname-themes-$date.tar.gz $wp_path$themes
	echo -e ${Green}"done!"${Reset}
}

function backup_wp {
	echo -n "WordPress..."
	ssh $site tar --ignore-failed-read --absolute-names \
	--exclude="wp-snapshots" \
	--exclude="wp-content/*backup*" \
	--exclude="wp-content/cache" \
	--exclude="wp-content/upgrade" \
	--exclude="wp-content/uploads" \
	--exclude="wp-content/updraft" \
	-zcf $blogname-all-$date.tar.gz $wp_path
	echo -e ${Green}"done!"${Reset}
}

function backup_uploads {
	echo -n "Uploads..."
	ssh $site"wp-content/uploads" tar --ignore-failed-read --absolute-names \
	-zcf $blogname-all-$date.tar.gz $wp_path
	echo -e ${Green}"done!"${Reset}
}

function download {
	echo "Downloading backups..."
	rsync -az --info=progress2 --remove-source-files $site:$blogname-*-$date.tar.gz $folder$blogname/backups/$date
}

echo
echo
echo -e ${Underline}"Backing up $wp_blogname:"${Reset}

maintenance_in

if [[ $wp_flag == "true" ]]; then
	backup_wp
	backup_db
	maintenance_out
	download
	exit
fi

[[ $db_flag == "true" ]] && backup_db
[[ $plugins_flag == "true" ]] && backup_plugins
[[ $themes_flag == "true" ]] && backup_themes
[[ $uploads_flag == "true" ]] && backup_uploads

maintenance_out
# Check there is something to download
[[ -n "$plugins_flag" ]] || [[ -n "$plugins_flag" ]] || [[ -n "$plugins_flag" ]] || [[ -n "$plugins_flag" ]] && download

echo
echo -e ${Underline}"Finished backing up $wp_blogname to:"${Reset}
echo "$folder$blogname/backups/$date"

exit
