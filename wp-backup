#!/usr/bin/env bash

# TO DO:
# USE FUNCTIONS BETTER
# OPTION TO USE ZIP FORMAT

set -e
set -o pipefail
# output all commands ran to console
# set -x

# Example usage:
# echo -e ${Red}This text will be red!${Reset}
Colors() {
	Escape="\033";

	# Reset
	Reset="${Escape}[0m"       # Text Reset

	# Regular Colors
	Black="${Escape}[0;30m"        # Black
	Red="${Escape}[0;31m"          # Red
	Green="${Escape}[0;32m"        # Green
	Yellow="${Escape}[0;33m"       # Yellow
	Blue="${Escape}[0;34m"         # Blue
	Purple="${Escape}[0;35m"       # Purple
	Cyan="${Escape}[0;36m"         # Cyan
	White="${Escape}[0;37m"        # White

	# Bold
	BBlack="${Escape}[1;30m"       # Black
	BRed="${Escape}[1;31m"         # Red
	BGreen="${Escape}[1;32m"       # Green
	BYellow="${Escape}[1;33m"      # Yellow
	BBlue="${Escape}[1;34m"        # Blue
	BPurple="${Escape}[1;35m"      # Purple
	BCyan="${Escape}[1;36m"        # Cyan
	BWhite="${Escape}[1;37m"       # White

	# Underline
	Underline="${Escape}[4m"
	UBlack="${Escape}[4;30m"       # Black
	URed="${Escape}[4;31m"         # Red
	UGreen="${Escape}[4;32m"       # Green
	UYellow="${Escape}[4;33m"      # Yellow
	UBlue="${Escape}[4;34m"        # Blue
	UPurple="${Escape}[4;35m"      # Purple
	UCyan="${Escape}[4;36m"        # Cyan
	UWhite="${Escape}[4;37m"       # White

	# Background
	On_Black="${Escape}[40m"       # Black
	On_Red="${Escape}[41m"         # Red
	On_Green="${Escape}[42m"       # Green
	On_Yellow="${Escape}[43m"      # Yellow
	On_Blue="${Escape}[44m"        # Blue
	On_Purple="${Escape}[45m"      # Purple
	On_Cyan="${Escape}[46m"        # Cyan
	On_White="${Escape}[47m"       # White

	# High Intensity
	IBlack="${Escape}[0;90m"       # Black
	IRed="${Escape}[0;91m"         # Red
	IGreen="${Escape}[0;92m"       # Green
	IYellow="${Escape}[0;93m"      # Yellow
	IBlue="${Escape}[0;94m"        # Blue
	IPurple="${Escape}[0;95m"      # Purple
	ICyan="${Escape}[0;96m"        # Cyan
	IWhite="${Escape}[0;97m"       # White

	# Bold High Intensity
	BIBlack="${Escape}[1;90m"      # Black
	BIRed="${Escape}[1;91m"        # Red
	BIGreen="${Escape}[1;92m"      # Green
	BIYellow="${Escape}[1;93m"     # Yellow
	BIBlue="${Escape}[1;94m"       # Blue
	BIPurple="${Escape}[1;95m"     # Purple
	BICyan="${Escape}[1;96m"       # Cyan
	BIWhite="${Escape}[1;97m"      # White

	# High Intensity backgrounds
	On_IBlack="${Escape}[0;100m"   # Black
	On_IRed="${Escape}[0;101m"     # Red
	On_IGreen="${Escape}[0;102m"   # Green
	On_IYellow="${Escape}[0;103m"  # Yellow
	On_IBlue="${Escape}[0;104m"    # Blue
	On_IPurple="${Escape}[0;105m"  # Purple
	On_ICyan="${Escape}[0;106m"    # Cyan
	On_IWhite="${Escape}[0;107m"   # White
}
Colors

function print_usage() {
	echo
	echo -e ${Purple}"NAME"${Reset}
	echo
	echo "	wp-backup"
	echo
	echo -e ${Purple}"DESCRIPTION"${Reset}
	echo
	echo "	Selectively backup WordPress host depending on option flag used."
	echo
	echo -e ${Purple}"SYNOPSYS"${Reset}
	echo
	echo "	wp-backup --host <remote host> <flag(s)>"
	echo
	echo -e ${Purple}"FLAGS:"${Reset}
	echo "	--help		Print this help message"
	echo "	--full,		-f	All of WordPress (minus uploads, cache and other wp-content directories), including database"
	echo "	--database,	-d	Database"
	echo "	--plugins,	-p	Plugins"
	echo "	--themes,	-t	Themes"
	echo "	--uploads,	-u	Uploads"
	echo "	--content,	-c	wp-content"
	echo -e "	--host,		-h	Remote host to backup from. Must (${RedF}both${Reset}) exist in ~/.wpcli/config.yml as an alias && ~/.ssh/config as a Host"
	echo "	--directory,	-D	Local directory to create back up files onto. If not set, will default to current directory."
	echo
	exit 1
}

[ $# -eq 0 ] && echo "This command requires an argument." >&2 && print_usage && exit 1

while [ ! $# -eq 0 ]
do
	case "$1" in
		--help )
			print_usage
			exit
			;;
		--full | -f)
			wp_flag="true"
			break
			;;
		--database | -d)
			db_flag="true"
			;;
		--plugins | -p)
			plugins_flag="true"
			;;
		--themes | -t)
			themes_flag="true"
			;;
		--uploads | -u)
			uploads_flag="true"
			;;
		--content | -c)
			content_flag="true"
			;;
		--host | -h)
			host=$2
			;;
		--directory | -D)
			directory=$2
			# Directory exists or exit
			if [ ! -d "$directory" ]
			then
				echo -e ${BRed}"Directory $directory does not exists!"${Reset}
				echo
				while true
				do
					read -r -p "Would you like to create it? [Y/n] " input
					echo

					case $input in
						[yY][eE][sS]|[yY]|"")
						mkdir --parents $directory
						echo -e ${Underline}"Created:${Reset} $directory"
						break
						;;
						[nN][oO]|[nN])
						echo "Suit yourself... Exiting!"
						exit
						;;
						*)
						echo "Invalid input..."
						;;
					esac
				done
			fi
			# Verify trailing slash exists, if not add it.
			[[ $directory != */ ]] && directory="$directory/"
			;;
		-*)
			echo
			echo -e ${Red}"$1${Reset} is not a valid argument!"
			print_usage
			exit 1
			;;
	esac
	shift
done

[[ -z "$host" ]] && echo "This command must have at least one option flag followed by the remote host's name!" && print_usage
[[ -z "$directory" ]] && directory="$PWD/"

date=`date +%Y-%m-%d`
plugins="wp-content/plugins"
themes="wp-content/themes"
uploads="wp-content/uploads"
content="wp-content"

# Get blog's name
wp_blogname=$(wp @$host option get blogname)
# Remove spaces
blogname=${wp_blogname//[[:space:]]/}

# wp_abspath=/var/www/wp-config.php
wp_abspath="$(wp @$host config path)"

# wp_path=/var/www/
[[ $wp_abspath != *\wp-config.php ]] && echo ${Red}"Path looks bad: $wp_abspath"${Reset} && exit 1
wp_path=${wp_abspath//wp-config.php}

function maintenance_in {
	echo
	echo -e ${UYellow}"*** Entering maintenance mode ***"${Reset}
	start=`date +%s`
	# create .maintenance file in WordPress' root directory to put in maintenance mode
	maintenance='<?php \n\$upgrading = time();'
	ssh $host " echo -e \"$maintenance\" > \"$wp_path.maintenance\" "
}

function maintenance_out {
	ssh $host rm -f $wp_path.maintenance
	end=`date +%s`
	echo
	echo
	echo -e ${UYellow}"*** Exiting maintenance mode after $((end-start)) seconds ***"${Reset}
	echo
}

function backup_db {
	echo -n "Database..."
	wp @$host db export - > $directory$blogname-db-$date.sql
	echo -e ${Green}"done!"${Reset}
}

function backup_plugins {
	echo -n "Plugins..."
	ssh $host -T "cd $wp_path; tar --ignore-failed-read \
	-zcf $blogname-plugins-$date.tar.gz $plugins"
	echo -e ${Green}"done!"${Reset}
}

function backup_themes {
	echo -n "Themes..."
	ssh $host -T "cd $wp_path; tar --ignore-failed-read \
	-zcf $blogname-themes-$date.tar.gz $themes"
	echo -e ${Green}"done!"${Reset}
}

function backup_uploads {
	echo -n "Uploads..."
	ssh $host -T "cd $wp_path; tar --ignore-failed-read \
	-zcf $blogname-uploads-$date.tar.gz $uploads"
	echo -e ${Green}"done!"${Reset}
}

function backup_content {
	echo -n "Content..."
	ssh $host -T "cd $wp_path; tar --ignore-failed-read \
	-zcf $blogname-content-$date.tar.gz $content"
	echo -e ${Green}"done!"${Reset}
}

function backup_wp {
	echo -n "WordPress..."
	ssh $host tar --ignore-failed-read \
	--exclude="wp-snapshots" \
	--exclude="wp-content/*backup*" \
	--exclude="wp-content/cache" \
	--exclude="wp-content/upgrade" \
	--exclude="wp-content/uploads" \
	--exclude="wp-content/updraft" \
	-zcf $blogname-all-$date.tar.gz $wp_path
	echo -e ${Green}"done!"${Reset}
}

function download {
	echo -n "Downloading backups..."
	rsync -az --info=progress2 --remove-source-files $host:$wp_path$blogname-*-$date.tar.gz $directory
}

function finish_message {
	echo
	echo -e ${Underline}"Finished backing up $wp_blogname to:"${Reset}
	echo "$directory"
}

maintenance_in

echo
echo
echo -e ${Underline}"Backing up $wp_blogname:"${Reset}
echo

if [[ $wp_flag == "true" ]]; then
	backup_wp
	backup_db
	maintenance_out
	download
	finish_message
	exit
fi

[[ $db_flag == "true" ]] && backup_db
[[ $plugins_flag == "true" ]] && backup_plugins
[[ $themes_flag == "true" ]] && backup_themes
[[ $uploads_flag == "true" ]] && backup_uploads
[[ $content_flag == "true" ]] && backup_content

maintenance_out
# Check there is something to download
[[ -n "$db_flag" ]] || [[ -n "$plugins_flag" ]] || [[ -n "$themes_flag" ]] || [[ -n "$uploads_flag" ]] || [[ -n "$content_flag" ]] && download

finish_message

exit
